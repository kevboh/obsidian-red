import esbuild from "esbuild";
import process from "process";
import fs from "fs";
import builtins from "builtin-modules";
import esbuildSvelte from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const testVaultPluginDir = "test-red-vault/.obsidian/plugins/red";
const copyToTestVault = () => {
  fs.copyFileSync("main.js", `${testVaultPluginDir}/main.js`);
  fs.copyFileSync("styles.css", `${testVaultPluginDir}/styles.css`);
  fs.copyFileSync("manifest.json", `${testVaultPluginDir}/manifest.json`);
  console.log(`Copied build to ${testVaultPluginDir}`);
};

esbuild
  .build({
    banner: {
      js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
      "obsidian",
      "electron",
      "@codemirror/autocomplete",
      "@codemirror/collab",
      "@codemirror/commands",
      "@codemirror/language",
      "@codemirror/lint",
      "@codemirror/search",
      "@codemirror/state",
      "@codemirror/view",
      "@lezer/common",
      "@lezer/highlight",
      "@lezer/lr",
      ...builtins,
    ],
    format: "cjs",
    watch: !prod && {
      onRebuild(error) {
        !error && copyToTestVault();
      },
    },
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    plugins: [
      esbuildSvelte({
        compilerOptions: { css: true },
        preprocess: sveltePreprocess(),
      }),
    ],
  })
  .then(copyToTestVault)
  .catch(() => process.exit(1));
